<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 后花园</title>
    <link>https://windyboy.github.io/tags/golang/</link>
    <description>Recent content in golang on 后花园</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>windyboy © 2016-2021 版权所有</copyright>
    <lastBuildDate>Mon, 12 Jul 2021 11:14:40 +0800</lastBuildDate><atom:link href="https://windyboy.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用go的graphql本地客户端mutation</title>
      <link>https://windyboy.github.io/post/2021/07/write_native_graphql_client_mutation/</link>
      <pubDate>Mon, 12 Jul 2021 11:14:40 +0800</pubDate>
      
      <guid>https://windyboy.github.io/post/2021/07/write_native_graphql_client_mutation/</guid>
      <description>概述 hasura-go-client 的文档中关于mutation部分的描述
 For example, to make the following GraphQL mutation:
 mutation($ep: Episode!, $review: ReviewInput!) { createReview(episode: $ep, review: $review) { stars commentary } } variables { &amp;#34;ep&amp;#34;: &amp;#34;JEDI&amp;#34;, &amp;#34;review&amp;#34;: { &amp;#34;stars&amp;#34;: 5, &amp;#34;commentary&amp;#34;: &amp;#34;This is a great movie!&amp;#34; } }  You can define:
 var m struct { CreateReview struct { Stars graphql.Int Commentary graphql.String } `graphql:&amp;#34;createReview(episode: $ep, review: $review)&amp;#34;` } variables := map[string]interface{}{ &amp;#34;ep&amp;#34;: starwars.Episode(&amp;#34;JEDI&amp;#34;), &amp;#34;review&amp;#34;: starwars.</description>
    </item>
    
    <item>
      <title>Urfave Cli 从配置文件读取参数</title>
      <link>https://windyboy.github.io/post/2021/06/urfave-cli-read-config-file/</link>
      <pubDate>Mon, 28 Jun 2021 16:59:45 +0800</pubDate>
      
      <guid>https://windyboy.github.io/post/2021/06/urfave-cli-read-config-file/</guid>
      <description>概述 urfavecli 的使用文档中关于从外部资源文件读取参数的说明比较模糊，从github的issues中也看到用户提到这个问题并提了PR，但现在这个版本依然没有更新，其实只是需要更新一下文档。
问题  There is a separate package altsrc that adds support for getting flag values from other file input sources.
Currently supported input source formats:
YAML JSON TOML
In order to get values for a flag from an alternate input source the following code would be added to wrap an existing cli.Flag like below:
altsrc.NewIntFlag(&amp;amp;cli.IntFlag{Name: &amp;ldquo;test&amp;rdquo;})
Initialization must also occur for these flags. Below is an example initializing getting data from a yaml file below.</description>
    </item>
    
  </channel>
</rss>
