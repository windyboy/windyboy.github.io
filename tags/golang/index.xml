<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 后花园</title>
    <link>https://windyboy.github.io/tags/golang/</link>
    <description>Recent content in golang on 后花园</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <copyright>Copyright © 2016–2021</copyright>
    <lastBuildDate>Mon, 12 Jul 2021 11:14:40 +0800</lastBuildDate>
    
	<atom:link href="https://windyboy.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用go的graphql本地客户端mutation</title>
      <link>https://windyboy.github.io/post/2021/07/write_native_graphql_client_mutation/</link>
      <pubDate>Mon, 12 Jul 2021 11:14:40 +0800</pubDate>
      
      <guid>https://windyboy.github.io/post/2021/07/write_native_graphql_client_mutation/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;%22https://github.com/hasura/go-graphql-client%22&#34; title=&#34;hasura-go-client&#34;&gt;hasura-go-client&lt;/a&gt; 的文档中关于mutation部分的描述&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, to make the following GraphQL mutation:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;mutation($ep: Episode!, $review: ReviewInput!) {
	createReview(episode: $ep, review: $review) {
		stars
		commentary
	}
}
variables {
	&amp;quot;ep&amp;quot;: &amp;quot;JEDI&amp;quot;,
	&amp;quot;review&amp;quot;: {
		&amp;quot;stars&amp;quot;: 5,
		&amp;quot;commentary&amp;quot;: &amp;quot;This is a great movie!&amp;quot;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;You can define:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;var m struct {
	CreateReview struct {
		Stars      graphql.Int
		Commentary graphql.String
	} `graphql:&amp;quot;createReview(episode: $ep, review: $review)&amp;quot;`
}
variables := map[string]interface{}{
	&amp;quot;ep&amp;quot;: starwars.Episode(&amp;quot;JEDI&amp;quot;),
	&amp;quot;review&amp;quot;: starwars.ReviewInput{
		Stars:      graphql.Int(5),
		Commentary: graphql.String(&amp;quot;This is a great movie!&amp;quot;),
	},
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当前的版本v0.2.0似乎有出入
如果模仿这里例子编写代码，并不能得到预期的效果。&lt;/p&gt;
&lt;p&gt;大致上有两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;传入的struct名称应该是一个以input结尾的类型&lt;/li&gt;
&lt;li&gt;内部的变量必须大写首字母，又必须使用json的说明在转换的时候变成小写&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;正确的做法&#34;&gt;正确的做法&lt;/h2&gt;
&lt;p&gt;首先在&lt;a href=&#34;%22https://hasura.io%22&#34;&gt;hasura&lt;/a&gt;的服务器上创建数据实体，如果创建的实体名为&amp;quot;data&amp;quot;，&lt;a href=&#34;%22https://hasura.io%22&#34;&gt;hasura&lt;/a&gt;服务器就会生成一些mutation的操作。
如果是插入一条数据，则需要调用&amp;quot;data_instert_one&amp;quot;的mutation。&lt;/p&gt;
&lt;p&gt;graphql的对应操作为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-graphql&#34; data-lang=&#34;graphql&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;mutation&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;$data&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;data_insert_input&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;!)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;insert_telegram_one&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;object&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;$data&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75af00&#34;&gt;id&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;DDDEEDDSS&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的例子是插入列名为&amp;quot;text&amp;quot;的数据，返回自动生成的id&lt;/p&gt;
&lt;p&gt;对应的go程序应该是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;data_insert_input&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#75af00&#34;&gt;Text&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;graphql&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;`json:&amp;#34;text&amp;#34;`&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75af00&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;graphql&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;mutation&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75af00&#34;&gt;InsertTelegramOne&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75af00&#34;&gt;Id&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;graphql&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;ID&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;`graphql:&amp;#34;insert_data_one(object: $data)&amp;#34;`&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75af00&#34;&gt;variables&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;{}{&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;data_insert_input&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75af00&#34;&gt;Text&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;graphql&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;},&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里注意，调用的mutation的名字是&amp;quot;insert_data_one&amp;quot;, 参数固定为&amp;quot;data_insert_input&amp;quot;都是固定的。
结构内部的变量名必须首字母大小，但必须在json转换的时候注解回小写名称（数据库中列名为小写）
在variables中定义的名称&amp;quot;data&amp;quot;,则是对应调用中&amp;quot;$data&amp;quot;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Urfave Cli 从配置文件读取参数</title>
      <link>https://windyboy.github.io/post/2021/06/urfave-cli-read-config-file/</link>
      <pubDate>Mon, 28 Jun 2021 16:59:45 +0800</pubDate>
      
      <guid>https://windyboy.github.io/post/2021/06/urfave-cli-read-config-file/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/urfave/cli&#34; title=&#34;urfavecli&#34;&gt;urfavecli&lt;/a&gt; 的使用文档中关于从外部资源文件读取参数的说明比较模糊，从&lt;a href=&#34;https://github.com&#34; title=&#34;github&#34;&gt;github&lt;/a&gt;的issues中也看到用户提到这个问题并提了PR，但现在这个版本依然没有更新，其实只是需要更新一下文档。&lt;/p&gt;
&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a separate package altsrc that adds support for getting flag values from other file input sources.&lt;/p&gt;
&lt;p&gt;Currently supported input source formats:&lt;/p&gt;
&lt;p&gt;YAML
JSON
TOML&lt;/p&gt;
&lt;p&gt;In order to get values for a flag from an alternate input source the following code would be added to wrap an existing cli.Flag like below:&lt;/p&gt;
&lt;p&gt;altsrc.NewIntFlag(&amp;amp;cli.IntFlag{Name: &amp;ldquo;test&amp;rdquo;})&lt;/p&gt;
&lt;p&gt;Initialization must also occur for these flags. Below is an example initializing getting data from a yaml file below.&lt;/p&gt;
&lt;p&gt;command.Before = altsrc.InitInputSourceWithContext(command.Flags, NewYamlSourceFromFlagFunc(&amp;ldquo;load&amp;rdquo;))&lt;/p&gt;
&lt;p&gt;The code above will use the &amp;ldquo;load&amp;rdquo; string as a flag name to get the file name of a yaml file from the cli.Context. It will then use that file name to initialize the yaml input source for any flags that are defined on that command. As a note the &amp;ldquo;load&amp;rdquo; flag used would also have to be defined on the command flags in order for this code snippet to work.&lt;/p&gt;
&lt;p&gt;Currently only YAML, JSON, and TOML files are supported but developers can add support for other input sources by implementing the altsrc.InputSourceContext for their given sources.&lt;/p&gt;
&lt;p&gt;Here is a more complete sample of a command using YAML support:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#75af00&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;

  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;github.com/urfave/cli/v2&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;github.com/urfave/cli/v2/altsrc&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;flags&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Flag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;altsrc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewIntFlag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;IntFlag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}),&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;StringFlag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;load&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#111&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;App&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;Action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Context&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;--test value.*default: 0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color:#00a8c8&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;nil&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;Before&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;altsrc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;InitInputSourceWithContext&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;flags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;altsrc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewYamlSourceFromFlagFunc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;load&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)),&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;Flags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;flags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#111&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码的意思实际做了3件事实现读取配置文件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个load的字符串参数，用于传递文件名的参数&lt;/li&gt;
&lt;li&gt;创建一个test的整形参数，用于保存从配置文件中读取的内容&lt;/li&gt;
&lt;li&gt;调用altsrc的读取功能装载&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于原版文档并没有提供运行的方式，以及参数的输出，开始读完不知道发生了什么
简而言之就是使用一个名字是load的参数，传入文件名，并在文件中读取名为test的参数&lt;/p&gt;
&lt;h2 id=&#34;解决方法&#34;&gt;解决方法&lt;/h2&gt;
&lt;h3 id=&#34;加入运行的指令&#34;&gt;加入运行的指令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go run main.go --load ./app.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从名为app.yml的文件中读取参数test&lt;/p&gt;
&lt;p&gt;app.yml:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;test: 123&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;在运行的action中加入参数test的输出&#34;&gt;在运行的Action中加入参数test的输出&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#75af00&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;

  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;github.com/urfave/cli/v2&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;github.com/urfave/cli/v2/altsrc&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;flags&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Flag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;altsrc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewIntFlag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;IntFlag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}),&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;StringFlag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;load&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#111&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;App&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;Action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Context&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;test: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
      &lt;span style=&#34;color:#00a8c8&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;nil&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;Before&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;altsrc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;InitInputSourceWithContext&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;flags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;altsrc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewYamlSourceFromFlagFunc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;load&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)),&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;Flags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;flags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#111&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原来的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;fmt.Println(&amp;quot;&amp;ndash;test value.*default: 0&amp;quot;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;替换为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;fmt.Println(&amp;ldquo;test: &amp;ldquo;, c.Int(&amp;ldquo;test&amp;rdquo;))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;配置文件取值覆盖&#34;&gt;配置文件取值覆盖&lt;/h3&gt;
&lt;p&gt;因为读取配置文件是发生在参数载入之前，所以可以通过在命令行上赋值覆盖在配置文件中的取值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go run main.go --test &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --load ./app.yml
test:  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[urfave/cli] : &lt;a href=&#34;https://github.com/urfave/cli&#34;&gt;https://github.com/urfave/cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[issue 800] : &lt;a href=&#34;https://github.com/urfave/cli/issues/800&#34;&gt;https://github.com/urfave/cli/issues/800&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>