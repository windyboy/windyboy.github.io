<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hasura on 后花园</title><link>https://windyboy.github.io/tags/hasura/</link><description>Recent content in hasura on 后花园</description><generator>Hugo -- gohugo.io</generator><language>cn</language><copyright>© 2016-2022 糖醋小排 版权所有.</copyright><lastBuildDate>Mon, 12 Jul 2021 11:14:40 +0800</lastBuildDate><atom:link href="https://windyboy.github.io/tags/hasura/index.xml" rel="self" type="application/rss+xml"/><item><title>使用go的graphql本地客户端mutation</title><link>https://windyboy.github.io/posts/tech/write_native_graphql_client_mutation/</link><pubDate>Mon, 12 Jul 2021 11:14:40 +0800</pubDate><guid>https://windyboy.github.io/posts/tech/write_native_graphql_client_mutation/</guid><description>&lt;h2 id="概述">概述&lt;/h2>
&lt;p>&lt;a href="https://github.com/hasura/go-graphql-client" title="hasura-go-client">hasura-go-client&lt;/a> 的文档中关于mutation部分的描述&lt;/p>
&lt;blockquote>
&lt;p>For example, to make the following GraphQL mutation:&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>mutation($ep: Episode!, $review: ReviewInput!) {
createReview(episode: $ep, review: $review) {
stars
commentary
}
}
variables {
&amp;#34;ep&amp;#34;: &amp;#34;JEDI&amp;#34;,
&amp;#34;review&amp;#34;: {
&amp;#34;stars&amp;#34;: 5,
&amp;#34;commentary&amp;#34;: &amp;#34;This is a great movie!&amp;#34;
}
}
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>You can define:&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>var m struct {
CreateReview struct {
Stars graphql.Int
Commentary graphql.String
} `graphql:&amp;#34;createReview(episode: $ep, review: $review)&amp;#34;`
}
variables := map[string]interface{}{
&amp;#34;ep&amp;#34;: starwars.Episode(&amp;#34;JEDI&amp;#34;),
&amp;#34;review&amp;#34;: starwars.ReviewInput{
Stars: graphql.Int(5),
Commentary: graphql.String(&amp;#34;This is a great movie!&amp;#34;),
},
}
&lt;/code>&lt;/pre>&lt;p>当前的版本v0.2.0似乎有出入
如果模仿这里例子编写代码，并不能得到预期的效果。&lt;/p>
&lt;p>大致上有两个问题：&lt;/p>
&lt;ol>
&lt;li>传入的struct名称应该是一个以input结尾的类型&lt;/li>
&lt;li>内部的变量必须大写首字母，又必须使用json的说明在转换的时候变成小写&lt;/li>
&lt;/ol>
&lt;h2 id="正确的做法">正确的做法&lt;/h2>
&lt;p>首先在&lt;a href="https://hasura.io">hasura&lt;/a>的服务器上创建数据实体，如果创建的实体名为&amp;quot;data&amp;quot;，&lt;a href="https://hasura.io">hasura&lt;/a>服务器就会生成一些mutation的操作。
如果是插入一条数据，则需要调用&amp;quot;data_instert_one&amp;quot;的mutation。&lt;/p>
&lt;p>graphql的对应操作为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">mutation&lt;/span> &lt;span style="color:#75af00">m&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">$data&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#75af00">data_insert_input&lt;/span>&lt;span style="color:#111">!)&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">insert_telegram_one&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#111">object&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#111">$data&lt;/span>&lt;span style="color:#111">)&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;data&amp;#34;&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;text&amp;#34;&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#d88200">&amp;#34;DDDEEDDSS&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的例子是插入列名为&amp;quot;text&amp;quot;的数据，返回自动生成的id&lt;/p>
&lt;p>对应的go程序应该是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">type&lt;/span> &lt;span style="color:#75af00">data_insert_input&lt;/span> &lt;span style="color:#00a8c8">struct&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">Text&lt;/span> &lt;span style="color:#75af00">graphql&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#75af00">String&lt;/span> &lt;span style="color:#d88200">`json:&amp;#34;text&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#75af00">graphql&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#75af00">NewClient&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#75af00">url&lt;/span>&lt;span style="color:#111">,&lt;/span> &lt;span style="color:#00a8c8">nil&lt;/span>&lt;span style="color:#111">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00a8c8">var&lt;/span> &lt;span style="color:#75af00">mutation&lt;/span> &lt;span style="color:#00a8c8">struct&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">InsertTelegramOne&lt;/span> &lt;span style="color:#00a8c8">struct&lt;/span> &lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">Id&lt;/span> &lt;span style="color:#75af00">graphql&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#75af00">ID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">}&lt;/span> &lt;span style="color:#d88200">`graphql:&amp;#34;insert_data_one(object: $data)&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75af00">variables&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#00a8c8">map&lt;/span>&lt;span style="color:#111">[&lt;/span>&lt;span style="color:#00a8c8">string&lt;/span>&lt;span style="color:#111">]&lt;/span>&lt;span style="color:#00a8c8">interface&lt;/span>&lt;span style="color:#111">{}{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d88200">&amp;#34;data&amp;#34;&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#75af00">data_insert_input&lt;/span>&lt;span style="color:#111">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75af00">Text&lt;/span>&lt;span style="color:#111">:&lt;/span> &lt;span style="color:#75af00">graphql&lt;/span>&lt;span style="color:#111">.&lt;/span>&lt;span style="color:#75af00">String&lt;/span>&lt;span style="color:#111">(&lt;/span>&lt;span style="color:#75af00">text&lt;/span>&lt;span style="color:#111">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#111">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#111">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里注意，调用的mutation的名字是&amp;quot;insert_data_one&amp;quot;, 参数固定为&amp;quot;data_insert_input&amp;quot;都是固定的。
结构内部的变量名必须首字母大小，但必须在json转换的时候注解回小写名称（数据库中列名为小写）
在variables中定义的名称&amp;quot;data&amp;quot;,则是对应调用中&amp;quot;$data&amp;quot;&lt;/p></description></item></channel></rss>