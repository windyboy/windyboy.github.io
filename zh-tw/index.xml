<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo Bootstrap</title><link>https://windyboy.github.io/zh-tw/</link><description>Recent content on Hugo Bootstrap</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2016-{year} windyboy. All Rights Reserved.</copyright><lastBuildDate>Mon, 12 Jul 2021 11:14:40 +0800</lastBuildDate><atom:link href="https://windyboy.github.io/zh-tw/index.xml" rel="self" type="application/rss+xml"/><item><title>使用go的graphql本地客户端mutation</title><link>https://windyboy.github.io/zh-tw/zh-cn/posts/tech/write_native_graphql_client_mutation/</link><pubDate>Mon, 12 Jul 2021 11:14:40 +0800</pubDate><guid>https://windyboy.github.io/zh-tw/zh-cn/posts/tech/write_native_graphql_client_mutation/</guid><description>概述 hasura-go-client 的文档中关于mutation部分的描述 For example, to make the following GraphQL mutation: mutation($ep: Episode!, $review: ReviewInput!) { createReview(episode: $ep, review: $review) { stars commentary } } variables { &amp;quot;ep&amp;quot;: &amp;quot;JEDI&amp;quot;, &amp;quot;review&amp;quot;: { &amp;quot;stars&amp;quot;: 5, &amp;quot;commentary&amp;quot;: &amp;quot;This is a great movie!&amp;quot; } } You can define: var m struct { CreateReview struct {</description></item><item><title>Urfave Cli 从配置文件读取参数</title><link>https://windyboy.github.io/zh-tw/zh-cn/posts/tech/urfave-cli-read-config-file/</link><pubDate>Mon, 28 Jun 2021 16:59:45 +0800</pubDate><guid>https://windyboy.github.io/zh-tw/zh-cn/posts/tech/urfave-cli-read-config-file/</guid><description>概述 urfavecli 的使用文档中关于从外部资源文件读取参数的说明比较模糊，从github 的issues中也看到用户提到这个问题并提了PR，但现在这个版本依</description></item><item><title>Alert Shortcode</title><link>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/alert/</link><pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate><guid>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/alert/</guid><description>&lt;p>本文展示瞭如何使用 &lt;code>alert&lt;/code> shortcode。&lt;/p></description></item><item><title>Bilibili Shortcode</title><link>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/bilibili/</link><pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate><guid>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/bilibili/</guid><description>&lt;p>關於嗶哩嗶哩 shortcode 的詳細使用說明。&lt;/p></description></item><item><title>CodePen Shortcode</title><link>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/codepen/</link><pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate><guid>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/codepen/</guid><description>&lt;p>關於 CodePen shortcode 的詳細說明。&lt;/p></description></item><item><title>JSFiddle Shortcode</title><link>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/jsfiddle/</link><pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate><guid>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/jsfiddle/</guid><description>&lt;p>關於 JSFiddle shortcode 的詳細說明。&lt;/p></description></item><item><title>JSRun Shortcode</title><link>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/jsrun/</link><pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate><guid>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/jsrun/</guid><description>&lt;p>關於 JSRun shortcode 的詳細說明。&lt;/p></description></item><item><title>優酷 Shortcode</title><link>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/youku/</link><pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate><guid>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/youku/</guid><description>&lt;p>關於優酷 shortcode 的詳細說明。&lt;/p></description></item><item><title>愛奇藝 Shortcode</title><link>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/iqiyi/</link><pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate><guid>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/iqiyi/</guid><description>&lt;p>關於愛奇藝 shortcode 的詳細說明。&lt;/p></description></item><item><title>網易雲音樂 Shortcode</title><link>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/neteasemusic/</link><pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate><guid>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/neteasemusic/</guid><description>&lt;p>關於網易雲音樂 Shortcode 的詳細使用說明。&lt;/p></description></item><item><title>騰訊視訊 Shortcode</title><link>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/tencentvideo/</link><pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate><guid>https://windyboy.github.io/zh-tw/zh-tw/posts/shortcodes/tencentvideo/</guid><description>&lt;p>關於騰訊視訊 shortcode 的詳細說明。&lt;/p></description></item><item><title>Drone CI 解决自签名证书的信任问题</title><link>https://windyboy.github.io/zh-tw/zh-cn/posts/tech/drone-ci-x509-issue/</link><pubDate>Fri, 28 Aug 2020 12:39:12 +0800</pubDate><guid>https://windyboy.github.io/zh-tw/zh-cn/posts/tech/drone-ci-x509-issue/</guid><description>概述 自建的系统如果没有使用公网资源，多数都是采用自签名的方式发放证书。最大的问题几乎就是自签名的信任问题，几乎成了自建工作环境最大的痛。大家</description></item><item><title>使用 Remark42 实现自建用户留言</title><link>https://windyboy.github.io/zh-tw/zh-cn/posts/tech/setup-remark42/</link><pubDate>Fri, 24 Jul 2020 13:56:31 +0800</pubDate><guid>https://windyboy.github.io/zh-tw/zh-cn/posts/tech/setup-remark42/</guid><description>概况 原来使用hugo自带的disqus插件实现用户留言，默认情况下感觉要读取的东西太多，于是打算找一个替代产品 最好是自建服务，装载要比dis</description></item><item><title>Kind添加私有仓库自签名CA证书</title><link>https://windyboy.github.io/zh-tw/zh-cn/posts/tech/kind-add-self-signed-ca/</link><pubDate>Mon, 20 Jul 2020 10:20:16 +0800</pubDate><guid>https://windyboy.github.io/zh-tw/zh-cn/posts/tech/kind-add-self-signed-ca/</guid><description>概况 在开发环境中安装kind 以后，如果要部署私有仓库中的镜像，需要把自签名的根证书添加到信任列表中。 否则需要使用kind load命令手动从主</description></item><item><title>nghttpx搭配squid科学浏览（更新debian）</title><link>https://windyboy.github.io/zh-tw/zh-cn/posts/tech/proxy-with-nghttpx-squid/</link><pubDate>Fri, 17 Jul 2020 15:13:14 +0800</pubDate><guid>https://windyboy.github.io/zh-tw/zh-cn/posts/tech/proxy-with-nghttpx-squid/</guid><description>概况 使用通用的https代理访问互联网 受限制网络 ==&amp;gt; http proxy ==&amp;gt; nghttpx server ==&amp;gt; squid ==&amp;gt; 互联网 服务器 服务器上部署代理工具 nghttp2 （nghttpx server） ，缓存服务</description></item><item><title>tomcat 以 keystore 的方式使用 letsencrypt 证书</title><link>https://windyboy.github.io/zh-tw/zh-cn/posts/tech/tomcat-keystore-using-letsencrypt-certs/</link><pubDate>Wed, 28 Sep 2016 16:00:00 +0800</pubDate><guid>https://windyboy.github.io/zh-tw/zh-cn/posts/tech/tomcat-keystore-using-letsencrypt-certs/</guid><description>概况 apache tomcat 应用服务器（在不使用apr连接器时）使用SSL证书的时候使用的是java专属的证书管理方式keystore , 并不能直接使用letse</description></item></channel></rss>