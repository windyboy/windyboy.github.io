<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on 后花园</title>
    <link>https://windyboy.github.io/categories/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on 后花园</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <copyright>Copyright © 2016–2021</copyright>
    <lastBuildDate>Mon, 12 Jul 2021 11:14:40 +0800</lastBuildDate>
    
	<atom:link href="https://windyboy.github.io/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用go的graphql本地客户端mutation</title>
      <link>https://windyboy.github.io/post/2021/07/write_native_graphql_client_mutation/</link>
      <pubDate>Mon, 12 Jul 2021 11:14:40 +0800</pubDate>
      
      <guid>https://windyboy.github.io/post/2021/07/write_native_graphql_client_mutation/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;%22https://github.com/hasura/go-graphql-client%22&#34; title=&#34;hasura-go-client&#34;&gt;hasura-go-client&lt;/a&gt; 的文档中关于mutation部分的描述&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, to make the following GraphQL mutation:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;mutation($ep: Episode!, $review: ReviewInput!) {
	createReview(episode: $ep, review: $review) {
		stars
		commentary
	}
}
variables {
	&amp;quot;ep&amp;quot;: &amp;quot;JEDI&amp;quot;,
	&amp;quot;review&amp;quot;: {
		&amp;quot;stars&amp;quot;: 5,
		&amp;quot;commentary&amp;quot;: &amp;quot;This is a great movie!&amp;quot;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;You can define:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;var m struct {
	CreateReview struct {
		Stars      graphql.Int
		Commentary graphql.String
	} `graphql:&amp;quot;createReview(episode: $ep, review: $review)&amp;quot;`
}
variables := map[string]interface{}{
	&amp;quot;ep&amp;quot;: starwars.Episode(&amp;quot;JEDI&amp;quot;),
	&amp;quot;review&amp;quot;: starwars.ReviewInput{
		Stars:      graphql.Int(5),
		Commentary: graphql.String(&amp;quot;This is a great movie!&amp;quot;),
	},
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当前的版本v0.2.0似乎有出入
如果模仿这里例子编写代码，并不能得到预期的效果。&lt;/p&gt;
&lt;p&gt;大致上有两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;传入的struct名称应该是一个以input结尾的类型&lt;/li&gt;
&lt;li&gt;内部的变量必须大写首字母，又必须使用json的说明在转换的时候变成小写&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;正确的做法&#34;&gt;正确的做法&lt;/h2&gt;
&lt;p&gt;首先在&lt;a href=&#34;%22https://hasura.io%22&#34;&gt;hasura&lt;/a&gt;的服务器上创建数据实体，如果创建的实体名为&amp;quot;data&amp;quot;，&lt;a href=&#34;%22https://hasura.io%22&#34;&gt;hasura&lt;/a&gt;服务器就会生成一些mutation的操作。
如果是插入一条数据，则需要调用&amp;quot;data_instert_one&amp;quot;的mutation。&lt;/p&gt;
&lt;p&gt;graphql的对应操作为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-graphql&#34; data-lang=&#34;graphql&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;mutation&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;$data&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;data_insert_input&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;!)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;insert_telegram_one&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;object&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;$data&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75af00&#34;&gt;id&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;DDDEEDDSS&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的例子是插入列名为&amp;quot;text&amp;quot;的数据，返回自动生成的id&lt;/p&gt;
&lt;p&gt;对应的go程序应该是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;data_insert_input&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#75af00&#34;&gt;Text&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;graphql&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;`json:&amp;#34;text&amp;#34;`&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75af00&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;graphql&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewClient&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#00a8c8&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;mutation&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75af00&#34;&gt;InsertTelegramOne&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75af00&#34;&gt;Id&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;graphql&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;ID&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;`graphql:&amp;#34;insert_data_one(object: $data)&amp;#34;`&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75af00&#34;&gt;variables&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;{}{&lt;/span&gt;
    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;data_insert_input&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75af00&#34;&gt;Text&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;graphql&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;},&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里注意，调用的mutation的名字是&amp;quot;insert_data_one&amp;quot;, 参数固定为&amp;quot;data_insert_input&amp;quot;都是固定的。
结构内部的变量名必须首字母大小，但必须在json转换的时候注解回小写名称（数据库中列名为小写）
在variables中定义的名称&amp;quot;data&amp;quot;,则是对应调用中&amp;quot;$data&amp;quot;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Urfave Cli 从配置文件读取参数</title>
      <link>https://windyboy.github.io/post/2021/06/urfave-cli-read-config-file/</link>
      <pubDate>Mon, 28 Jun 2021 16:59:45 +0800</pubDate>
      
      <guid>https://windyboy.github.io/post/2021/06/urfave-cli-read-config-file/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/urfave/cli&#34; title=&#34;urfavecli&#34;&gt;urfavecli&lt;/a&gt; 的使用文档中关于从外部资源文件读取参数的说明比较模糊，从&lt;a href=&#34;https://github.com&#34; title=&#34;github&#34;&gt;github&lt;/a&gt;的issues中也看到用户提到这个问题并提了PR，但现在这个版本依然没有更新，其实只是需要更新一下文档。&lt;/p&gt;
&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a separate package altsrc that adds support for getting flag values from other file input sources.&lt;/p&gt;
&lt;p&gt;Currently supported input source formats:&lt;/p&gt;
&lt;p&gt;YAML
JSON
TOML&lt;/p&gt;
&lt;p&gt;In order to get values for a flag from an alternate input source the following code would be added to wrap an existing cli.Flag like below:&lt;/p&gt;
&lt;p&gt;altsrc.NewIntFlag(&amp;amp;cli.IntFlag{Name: &amp;ldquo;test&amp;rdquo;})&lt;/p&gt;
&lt;p&gt;Initialization must also occur for these flags. Below is an example initializing getting data from a yaml file below.&lt;/p&gt;
&lt;p&gt;command.Before = altsrc.InitInputSourceWithContext(command.Flags, NewYamlSourceFromFlagFunc(&amp;ldquo;load&amp;rdquo;))&lt;/p&gt;
&lt;p&gt;The code above will use the &amp;ldquo;load&amp;rdquo; string as a flag name to get the file name of a yaml file from the cli.Context. It will then use that file name to initialize the yaml input source for any flags that are defined on that command. As a note the &amp;ldquo;load&amp;rdquo; flag used would also have to be defined on the command flags in order for this code snippet to work.&lt;/p&gt;
&lt;p&gt;Currently only YAML, JSON, and TOML files are supported but developers can add support for other input sources by implementing the altsrc.InputSourceContext for their given sources.&lt;/p&gt;
&lt;p&gt;Here is a more complete sample of a command using YAML support:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#75af00&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;

  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;github.com/urfave/cli/v2&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;github.com/urfave/cli/v2/altsrc&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;flags&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Flag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;altsrc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewIntFlag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;IntFlag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}),&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;StringFlag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;load&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#111&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;App&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;Action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Context&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;--test value.*default: 0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color:#00a8c8&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;nil&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;Before&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;altsrc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;InitInputSourceWithContext&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;flags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;altsrc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewYamlSourceFromFlagFunc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;load&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)),&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;Flags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;flags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#111&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码的意思实际做了3件事实现读取配置文件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个load的字符串参数，用于传递文件名的参数&lt;/li&gt;
&lt;li&gt;创建一个test的整形参数，用于保存从配置文件中读取的内容&lt;/li&gt;
&lt;li&gt;调用altsrc的读取功能装载&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于原版文档并没有提供运行的方式，以及参数的输出，开始读完不知道发生了什么
简而言之就是使用一个名字是load的参数，传入文件名，并在文件中读取名为test的参数&lt;/p&gt;
&lt;h2 id=&#34;解决方法&#34;&gt;解决方法&lt;/h2&gt;
&lt;h3 id=&#34;加入运行的指令&#34;&gt;加入运行的指令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go run main.go --load ./app.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从名为app.yml的文件中读取参数test&lt;/p&gt;
&lt;p&gt;app.yml:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;test: 123&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;在运行的action中加入参数test的输出&#34;&gt;在运行的Action中加入参数test的输出&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#75af00&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;

  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;github.com/urfave/cli/v2&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;github.com/urfave/cli/v2/altsrc&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#111&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;flags&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Flag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;altsrc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewIntFlag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;IntFlag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}),&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;StringFlag&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;load&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#111&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;App&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;Action&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cli&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Context&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#111&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;test: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
      &lt;span style=&#34;color:#00a8c8&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;nil&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;Before&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;altsrc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;InitInputSourceWithContext&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;flags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;altsrc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;NewYamlSourceFromFlagFunc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;load&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)),&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;Flags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;flags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#111&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原来的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;fmt.Println(&amp;quot;&amp;ndash;test value.*default: 0&amp;quot;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;替换为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;fmt.Println(&amp;ldquo;test: &amp;ldquo;, c.Int(&amp;ldquo;test&amp;rdquo;))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;配置文件取值覆盖&#34;&gt;配置文件取值覆盖&lt;/h3&gt;
&lt;p&gt;因为读取配置文件是发生在参数载入之前，所以可以通过在命令行上赋值覆盖在配置文件中的取值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go run main.go --test &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --load ./app.yml
test:  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[urfave/cli] : &lt;a href=&#34;https://github.com/urfave/cli&#34;&gt;https://github.com/urfave/cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[issue 800] : &lt;a href=&#34;https://github.com/urfave/cli/issues/800&#34;&gt;https://github.com/urfave/cli/issues/800&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Drone CI 解决自签名证书的信任问题</title>
      <link>https://windyboy.github.io/post/2020/08/drone-ci-x509-issue/</link>
      <pubDate>Fri, 28 Aug 2020 12:39:12 +0800</pubDate>
      
      <guid>https://windyboy.github.io/post/2020/08/drone-ci-x509-issue/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;自建的系统如果没有使用公网资源，多数都是采用自签名的方式发放证书。最大的问题几乎就是自签名的信任问题，几乎成了自建工作环境最大的痛。大家都以为把主机的证书挂载到runner上就可以解决问题，&lt;strong&gt;然而并不行&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;clone 的过程中，证书不信任&lt;/li&gt;
&lt;li&gt;push docker 镜像， release 发布证书不信任&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;解决方法&#34;&gt;解决方法&lt;/h2&gt;
&lt;h3 id=&#34;clone&#34;&gt;clone&lt;/h3&gt;
&lt;p&gt;如果不是把clone作为一个step，可以直接使用skip_verify: true忽略验证&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clone:
  tags: true
  skip_verify: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然也可以使用下面挂载主机证书的方法&lt;/p&gt;
&lt;h3 id=&#34;证书不信任&#34;&gt;证书不信任&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;首先把登陆drone的用户设置成admin
在drone server启动的环境变量中设置&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;DRONE_USER_CREATE=username:yourgitloginname,admin:true
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;把项目设置为信任项目&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://windyboy.github.io/static/trust.png&#34; alt=&#34;trust project&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;把主机的证书目录挂载到执行环境中&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;- name: release-publish
    image: plugins/docker
    volumes:
      - name: certs
        path: /etc/ssl/certs

volumes:
  - name: certs
    host:
      path: /etc/ssl/certs
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>使用 Remark42 实现自建用户留言</title>
      <link>https://windyboy.github.io/post/2020/07/setup-remark42/</link>
      <pubDate>Fri, 24 Jul 2020 13:56:31 +0800</pubDate>
      
      <guid>https://windyboy.github.io/post/2020/07/setup-remark42/</guid>
      <description>&lt;h2 id=&#34;概况&#34;&gt;概况&lt;/h2&gt;
&lt;p&gt;原来使用hugo自带的disqus插件实现用户留言，默认情况下感觉要读取的东西太多，于是打算找一个替代产品
最好是自建服务，装载要比disqus快&lt;/p&gt;
&lt;h2 id=&#34;选择&#34;&gt;选择&lt;/h2&gt;
&lt;p&gt;根据官方的指引&lt;a href=&#34;https://gohugo.io/content-management/comments/&#34; title=&#34;comments&#34;&gt;comments&lt;/a&gt;，其实可以选择的替代品不少&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&#34;comments-alternatives&#34;&gt;Comments Alternatives&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;There are a few alternatives to commenting on static sites for those who do not want to use Disqus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://staticman.net/&#34; title=&#34;Staticman&#34;&gt;Staticman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.talkyard.io/blog-comments&#34; title=&#34;talkyard&#34;&gt;Talkyard&lt;/a&gt; (Open source, &amp;amp; serverless hosting)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://intensedebate.com/&#34; title=&#34;Intense Debate&#34;&gt;IntenseDebate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://graphcomment.com/&#34; title=&#34;Graph Comment&#34;&gt;Graph Comment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://muut.com/&#34; title=&#34;muut&#34;&gt;Muut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://posativ.org/isso/&#34; title=&#34;isso&#34;&gt;Isso&lt;/a&gt; (Self-hosted, Python)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://utteranc.es/&#34; title=&#34;Utterances&#34;&gt;Utterances&lt;/a&gt; (Open source, GitHub comments widget built on GitHub issues)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/umputun/remark42&#34; title=&#34;remark42&#34;&gt;Remark42&lt;/a&gt; (Open source, Golang, Easy to run docker)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://commento.io/&#34; title=&#34;commento&#34;&gt;Commento&lt;/a&gt; (Open Source, available as a service, local install, or docker image)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talk.hyvor.com/&#34; title=&#34;Hyvor Talk&#34;&gt;Hyvor Talk&lt;/a&gt; (Available as a service)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;有使用github isses作为载体的，但看到网上有人反映数量会爆&lt;/p&gt;
&lt;p&gt;Isso 倒也是自服的，但python写的，对比&lt;a href=&#34;https://github.com/umputun/remark42&#34; title=&#34;remark42&#34;&gt;remark42&lt;/a&gt;还是会大一些，安装也会麻烦&lt;/p&gt;
&lt;p&gt;这里选择的&lt;a href=&#34;https://github.com/umputun/remark42&#34; title=&#34;remark42&#34;&gt;remark42&lt;/a&gt;，考虑到本身是&lt;a href=&#34;https://golang.org/&#34; title=&#34;golang&#34;&gt;golang&lt;/a&gt;编写，这样会有比较小的体积以及较好的性能&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;官方的安装指引有使用&lt;a href=&#34;https://www.docker.com/&#34; title=&#34;docker&#34;&gt;docker&lt;/a&gt;和二进制安装两种方案&lt;/p&gt;
&lt;p&gt;因为我的服务器资源有限，其实docker都是挺重的负担，这里选择直接安装二进制文件，编写服务脚本&lt;/p&gt;
&lt;p&gt;从release的页面 &lt;a href=&#34;https://github.com/umputun/remark42/releases&#34;&gt;https://github.com/umputun/remark42/releases&lt;/a&gt; 选择一个稳定的版本，一般就是linux 64位的版本
&lt;a href=&#34;https://github.com/umputun/remark42/releases/download/v1.6.0/remark42.linux-amd64.tar.gz&#34;&gt;https://github.com/umputun/remark42/releases/download/v1.6.0/remark42.linux-amd64.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   $ wget https://github.com/umputun/remark42/releases/download/v1.6.0/remark42.linux-amd64.tar.gz
   $ tar xzvf  remark42.linux-amd64.tar.gz
   $ sudo cp remark42.linux-amd64 /usr/local/bin/remark42  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为是&lt;a href=&#34;https://golang.org/&#34; title=&#34;golang&#34;&gt;golang&lt;/a&gt;的程序，下载包只有不到8M的体积，而且没有其他依赖，在微型服务器上安装非常舒服&lt;/p&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;h3 id=&#34;创建用户资源&#34;&gt;创建用户/资源&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ sudo useradd -r remark42
$ sudo mkdir -m 770 /var/www/remark42
$ sudo chown :remark42 /var/www/remark42
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;运行参数环境变量&#34;&gt;运行参数（环境变量）&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ sudo mkdir /etc/remark42
$ sudo vim /etc/remark42/remark42.conf
REMARK_URL=https://myblog.address
SECRET=some_secret_key_phrase_1234
SITE=myblog
AUTH_ANON=true
EMOJI=true
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;systemd-服务脚本&#34;&gt;systemd 服务脚本&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/systemd/system/remark42.service
[Unit]
Description=remark42 comment engine
After=network.target

[Service]
User=remark42
Group=remark42
EnvironmentFile=/etc/remark42/remark42.conf
WorkingDirectory=/var/www/remark42
Restart=always
RestartSec=5
ExecStart=/usr/local/bin/remark42 server

[Install]
WantedBy=multi-user.target

$ sudo systemctl daemon-reload
$ sudo systemctl start remark42
$ sudo systemctl enable remark42
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;配置反向代理nginx&#34;&gt;配置反向代理(nginx)&lt;/h3&gt;
&lt;p&gt;最好设置一个独立的子域名，比如 remark.my.blog&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo cat /etc/nginx/sites-available/remark42 
server {
    server_name remark.windy.me;
    listen 443;
    ssl_certificate /etc/letsencrypt/live/remark.my.blog/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/remark.my.blog/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    location / {
         proxy_redirect          off;
         proxy_set_header        X-Real-IP $remote_addr;
         proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header        Host $http_host;
         proxy_pass              http://127.0.0.1:8080/;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/umputun/remark42&#34; title=&#34;remark42&#34;&gt;remark42&lt;/a&gt;服务启动后，在本地监听8080端口，把nginx代理到服务上&lt;/p&gt;
&lt;h3 id=&#34;oauth用户认证服务&#34;&gt;OAuth用户认证服务&lt;/h3&gt;
&lt;h4 id=&#34;google&#34;&gt;Google&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;打开 &lt;a href=&#34;https://console.developers.google.com/cloud-resource-manager&#34;&gt;https://console.developers.google.com/cloud-resource-manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;创建应用 remark&lt;/li&gt;
&lt;li&gt;点击左上角下拉菜单，选择 APIs &amp;amp; Services ， 再点击 Credentials&lt;/li&gt;
&lt;li&gt;在 Authorized JavaScript origins -&amp;gt; URIs 中添加blog的地址和remark服务的地址&lt;/li&gt;
&lt;li&gt;Authorized redirect URIs -&amp;gt; URIs 中填写回掉地址 &lt;a href=&#34;https://remark.my.blog/auth/google/callback&#34;&gt;https://remark.my.blog/auth/google/callback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;根据页面信息填写配置文件 remark42.conf 中相应的配置信息AUTH_GOOGLE_CID，AUTH_GOOGLE_CSEC&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;github&#34;&gt;Github&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;打开开发者页面 &lt;a href=&#34;https://github.com/settings/developers&#34;&gt;https://github.com/settings/developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;填写 Homepage URL &amp;ldquo;&lt;a href=&#34;https://remark.my.blog&#34;&gt;https://remark.my.blog&lt;/a&gt;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;填写 Authorization callback URL &amp;ldquo;&lt;a href=&#34;https://remark.my.blog/auth/github/callback%22&#34;&gt;https://remark.my.blog/auth/github/callback&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;根据页面 Client ID, Client Secret 更新配置文件 remark42.conf:  AUTH_GITHUB_CID， AUTH_GITHUB_CSEC&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;twitter&#34;&gt;Twitter&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;打开 &lt;a href=&#34;https://developer.twitter.com/en/apps&#34;&gt;https://developer.twitter.com/en/apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;创建 App&lt;/li&gt;
&lt;li&gt;填写 Website URL &amp;ldquo;&lt;a href=&#34;https://remark.my.blog&#34;&gt;https://remark.my.blog&lt;/a&gt;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;填写 Callback URL &amp;ldquo;&lt;a href=&#34;https://remark.my.blog/auth/twitter/callback%22&#34;&gt;https://remark.my.blog/auth/twitter/callback&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;点击 Keys and tokens 的tab, 查看 Consumer API keys： API key，API secret key&lt;/li&gt;
&lt;li&gt;更新配置文件 remark42.conf， 填写 AUTH_TWITTER_CID ，AUTH_TWITTER_CSEC&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置hugo的评论模版&#34;&gt;配置hugo的评论模版&lt;/h3&gt;
&lt;p&gt;打开主题中的模版文件 layouts/partials/comments.html
添加remark42配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{- if  .Site.Params.remark42SiteID  }}
&amp;lt;script&amp;gt;
	var remark_config = {
		host: {{ .Site.Params.remark42Url }},
        site_id: {{ .Site.Params.remark42SiteID }},
        components: [&#39;embed&#39;],
		url: {{ .Permalink }},
        locale: {{ .Site.Language.Lang }},
        max_shown_comments: 10,
        theme: &#39;dark&#39;,
	  };
	  (function(c) {
		for(var i = 0; i &amp;lt; c.length; i++){
		  var d = document, s = d.createElement(&#39;script&#39;);
		  s.src = remark_config.host + &#39;/web/&#39; +c[i] +&#39;.js&#39;;
		  s.defer = true;
		  (d.head || d.body).appendChild(s);
		}
	  })(remark_config.components || [&#39;embed&#39;]);
   &amp;lt;/script&amp;gt;
&amp;lt;div id=&amp;quot;remark42&amp;quot; &amp;gt;&amp;lt;/div&amp;gt;
{{- end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改hugo配置文件config.toml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[params]
  remark42SiteID = &amp;quot;myblog&amp;quot;
  remark42Url = &amp;quot;https://remark.my.blog&amp;quot;
  comments = true
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;配置评论管理员&#34;&gt;配置评论管理员&lt;/h3&gt;
&lt;p&gt;在评论框在底部成功出现以后，使用Oauth服务登陆评论系统，登陆成功以后可以点击评论的nickname，可以看到当前用户编号
设置用户编号为评论管理员，可以设置多个管理员，用逗号分割&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/remark42/remark42.conf
ADMIN_SHARED_ID=github_20924f5ace2e27ff9b98801b837b8a495308d782
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;配置-telegram-的通知&#34;&gt;配置 telegram 的通知&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;打开 Telegram 应用&lt;/li&gt;
&lt;li&gt;查询联系人 BotFather&lt;/li&gt;
&lt;li&gt;和 BotFather 对话，输入 /newbot 创建机器人&lt;/li&gt;
&lt;li&gt;根据提示信息，还需要创建一个结尾是 _bot的机器人&lt;/li&gt;
&lt;li&gt;根据 HTTP API的token信息填写 remark42.conf 中 NOTIFY_TELEGRAM_TOKEN&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/remark42/remark42.conf
NOTIFY_TYPE=telegram
NOTIFY_TELEGRAM_TOKEN=12345678:xy778Iltzsdr45tg
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;使用Telegram的应用，创建一个私有的Channel， 并把新创建的机器人加为Channel管理员&lt;/li&gt;
&lt;li&gt;使用 &lt;a href=&#34;https://web.telegram.org/&#34; title=&#34;Telegram 网页&#34;&gt;Telegram 网页&lt;/a&gt; 查询channel的编号
&lt;ul&gt;
&lt;li&gt;打开网页以后，点击刚才创建的 channel&lt;/li&gt;
&lt;li&gt;在地址栏出现 &lt;a href=&#34;https://web.telegram.org/#/im?p=c&#34;&gt;https://web.telegram.org/#/im?p=c&lt;/a&gt;&lt;strong&gt;1055587116&lt;/strong&gt;_11052224402541910257&lt;/li&gt;
&lt;li&gt;这里 1055587116 为编号，在前面加 &lt;strong&gt;-100&lt;/strong&gt; 成为频道编号 &lt;strong&gt;-1001055587116&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/remark42/remark42.conf
NOTIFY_TELEGRAM_CHAN=-1001055587116
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全部配置完后，重启remark42的服务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl restart remark42
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[hugo comments] &lt;a href=&#34;https://gohugo.io/content-management/comments/&#34;&gt;https://gohugo.io/content-management/comments/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[remark42 official doc] &lt;a href=&#34;https://github.com/umputun/remark42&#34;&gt;https://github.com/umputun/remark42&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[hugo comments with remark42] &lt;a href=&#34;https://blog.lasall.dev/post/hugo-and-comments-with-remark42/&#34;&gt;https://blog.lasall.dev/post/hugo-and-comments-with-remark42/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kind添加私有仓库自签名CA证书</title>
      <link>https://windyboy.github.io/post/2020/07/kind-add-self-signed-ca/</link>
      <pubDate>Mon, 20 Jul 2020 10:20:16 +0800</pubDate>
      
      <guid>https://windyboy.github.io/post/2020/07/kind-add-self-signed-ca/</guid>
      <description>&lt;h2 id=&#34;概况&#34;&gt;概况&lt;/h2&gt;
&lt;p&gt;在开发环境中安装&lt;a href=&#34;%22https://kind.sigs.k8s.io/%22&#34; title=&#34;kind&#34;&gt;kind&lt;/a&gt;以后，如果要部署私有仓库中的镜像，需要把自签名的根证书添加到信任列表中。
否则需要使用&lt;a href=&#34;%22https://kind.sigs.k8s.io/%22&#34; title=&#34;kind&#34;&gt;kind&lt;/a&gt; load命令手动从主机把镜像加载到容器当中，不能自动部署，略嫌麻烦。&lt;/p&gt;
&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;p&gt;在部署私有镜像仓库中的镜像的时候发生错误：&amp;ldquo;x509: certificate signed by unknown authority&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;解决&#34;&gt;解决&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;查看&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;#  get container id
$ docker ps
CONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS              PORTS                       NAMES
8c52432697b6        kindest/node:v1.18.2   &amp;quot;/usr/local/bin/entr…&amp;quot;   3 days ago          Up 4 hours          127.0.0.1:39147-&amp;gt;6443/tcp   kind-control-plane
# attach
$ docker exec -it 8c52432697b6 /bin/bash
root@kind-control-plane:/# cat /etc/issue
Ubuntu 19.10 \n \l
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;发现是ubuntu 19
于是问题可以解决，要么把主机中含有自签名ca的信任列表Mount到容器中，要么在容器中添加自签名ca证书即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加ca证书&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;root@kind-control-plane:/# mkdir /usr/local/share/ca-certificates/company
root@kind-control-plane:/# exit

$ docker cp your-ca.crt 8c52432697b6:/usr/share/etc/ca-certificates/company/

$ docker exec -it 8c52432697b6 /bin/bash

root@kind-control-plane:/# update-ca-certificates

# verify
root@kind-control-plane:/# curl https://your-private-registry
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How to install certificates for command line &lt;a href=&#34;https://askubuntu.com/questions/645818/how-to-install-certificates-for-command-line&#34;&gt;https://askubuntu.com/questions/645818/how-to-install-certificates-for-command-line&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>nghttpx搭配squid科学浏览（更新debian）</title>
      <link>https://windyboy.github.io/post/2020/07/proxy-with-nghttpx-squid/</link>
      <pubDate>Fri, 17 Jul 2020 15:13:14 +0800</pubDate>
      
      <guid>https://windyboy.github.io/post/2020/07/proxy-with-nghttpx-squid/</guid>
      <description>&lt;h2 id=&#34;概况&#34;&gt;概况&lt;/h2&gt;
&lt;p&gt;使用通用的https代理访问互联网&lt;/p&gt;
&lt;p&gt;受限制网络 ==&amp;gt; http proxy ==&amp;gt; nghttpx server ==&amp;gt; squid ==&amp;gt; 互联网&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务器&lt;/p&gt;
&lt;p&gt;服务器上部署代理工具 &lt;a href=&#34;https://nghttp2.org&#34; title=&#34;nghttp2&#34;&gt;nghttp2&lt;/a&gt;（nghttpx server） ，缓存服务&lt;a href=&#34;http://www.squid-cache.org&#34; title=&#34;squid&#34;&gt;squid&lt;/a&gt;
安装&lt;a href=&#34;https://letsencrypt.org&#34; title=&#34;letsencrypt&#34;&gt;letsencrypt&lt;/a&gt;证书&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端&lt;/p&gt;
&lt;p&gt;客户端可以不安装特别软件，直接设置proxy就可以，在服务端如果开启客户端认证，需要在客户端安装客户证书&lt;/p&gt;
&lt;p&gt;https proxy client ==&amp;gt; https 服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主要工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https proxy 服务器 &lt;a href=&#34;https://nghttp2.org&#34; title=&#34;nghttp2&#34;&gt;nghttp2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;certbot 安装&lt;a href=&#34;https://letsencrypt.org&#34; title=&#34;letsencrypt&#34;&gt;letsencrypt&lt;/a&gt;证书&lt;/li&gt;
&lt;li&gt;缓存服务器 &lt;a href=&#34;http://www.squid-cache.org&#34; title=&#34;squid&#34;&gt;squid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;客户端证书生成工具 &lt;a href=&#34;https://github.com/OpenVPN/easy-rsa&#34; title=&#34;easyrsa&#34;&gt;easyrsa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;客户端证书导入导出 &lt;a href=&#34;https://www.openssl.org&#34; title=&#34;openssl&#34;&gt;openssl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;h3 id=&#34;centos-7&#34;&gt;centos 7&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#cat /etc/redhat-release 
CentOS Linux release 7.2.1511 (Core)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;基础软件(编译)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果使用epel的源安装，首先安装epel&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yum install epel-release
# yum install openssl git-core
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nghttp2.org&#34; title=&#34;nghttp2&#34;&gt;nghttp2&lt;/a&gt; &lt;a href=&#34;http://www.squid-cache.org&#34; title=&#34;squid&#34;&gt;squid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用的代理程序是nghttpx, 安装的软件包是nghttp2，nghttp2中包含nghttpx的代理服务程序&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yum install nghttp2 squid
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;nghttp2 也可以自编译源码来安装，epel安装的版本是1.7,通过编译可以安装1.9&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;sudo yum groupinstall &amp;quot;Development Tools&amp;quot;
sudo yum install libev libev-devel zlib zlib-devel openssl openssl-devel git
git clone https://github.com/nghttp2/nghttp2.git
cd nghttp2
autoreconf -i
automake
autoconf
./configure
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;默认安装位置是 &lt;code&gt;/usr/local/bin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;在centos 7的环境正不能使用最新版的1.11.0-DEV，需要使用1.9.x的版本。在clone项目以后需要checkout 1.9.x的版本&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout v1.9.x&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后再执行编译的操作,编译安装完成以后，检查一下版本&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# /usr/local/bin/nghttpx -v&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;debian-10-ubuntu&#34;&gt;debian 10 （ubuntu）&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# lsb_release -a
No LSB modules are available.
Distributor ID: Debian
Description:    Debian GNU/Linux 10 (buster)
Release:        10
Codename:       buster
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;sudo apt install nghttp2

sudo apt install python-certbot-apache -t buster-backports
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装&lt;a href=&#34;https://certbot.eff.org&#34; title=&#34;certbot&#34;&gt;certbot&lt;/a&gt;会附带安装一个apache的服务器，需要注意，如果有web的服务，需要禁止掉，申请证书的时候可以临时启动一个
编译（略）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OpenVPN/easy-rsa&#34; title=&#34;easyrsa&#34;&gt;easyrsa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;克隆easyrsa源码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# git clone https://github.com/OpenVPN/easy-rsa.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把easyrsa 复制到/opt/中完成安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd easy-rsa/
# cp -r easyrsa3 /opt/
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;h3 id=&#34;证书&#34;&gt;证书&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https 证书&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务器端证书可以使用&lt;a href=&#34;https://letsencrypt.org&#34; title=&#34;letsencrypt&#34;&gt;letsencrypt&lt;/a&gt;提供的免费证书。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;配置&lt;a href=&#34;https://letsencrypt.org&#34; title=&#34;letsencrypt&#34;&gt;letsencrypt&lt;/a&gt;证书的时候可以使用&lt;a href=&#34;https://github.com/lukas2511/letsencrypt.sh&#34;&gt;letsencrypt.sh&lt;/a&gt;的脚本,可以简化配置的过程。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;a href=&#34;https://certbot.eff.org&#34; title=&#34;certbot&#34;&gt;certbot&lt;/a&gt;配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo certbot certonly -d your.domain
How would you like to authenticate with the ACME CA?
1: Apache Web Server plugin (apache) 
2: Nginx Web Server plugin (nginx)
3: Spin up a temporary webserver (standalone) 
4: Place files in webroot directory (webroot)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;申请证书的时候需要在80端口开启一个web服务，如果使用之前安装的apache可以选1，同样也可以选择nginx，如果没有web服务，也可以选3，临时启动一个服务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端验证证书&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自己做一个ca，自行签发客户端证书，使用easyrsa 配置客户端证书&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /opt/easyrsa3
# mv vars.example vars
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编辑vars文件，去掉前面的注释，编辑中主要的变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set_var EASYRSA_REQ_COUNTRY    &amp;quot;US&amp;quot;
set_var EASYRSA_REQ_PROVINCE   &amp;quot;California&amp;quot;
set_var EASYRSA_REQ_CITY       &amp;quot;San Francisco&amp;quot;
set_var EASYRSA_REQ_ORG        &amp;quot;Copyleft Certificate Co&amp;quot;
set_var EASYRSA_REQ_EMAIL      &amp;quot;me@example.net&amp;quot;
set_var EASYRSA_REQ_OU         &amp;quot;My Organizational Unit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;生成客户端证书&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./easyrsa init-pki
# ./easyrsa build-ca nopass
# ./easyrsa gen-dh
# ./easyrsa build-client-full client-me nopass
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;导出CA证书&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# openssl x509 -in pki/ca.crt -out ca.pem -outform PEM
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;导出客户端证书&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# openssl pkcs12 -export -clcerts -in pki/issued/client-me.crt -inkey pki/private/client-me.key -out client-me.p12
# openssl pkcs12 -in client-me.p12 -out client-me.pem -clcerts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;客户端电脑导入ca和客户端证书&lt;/p&gt;
&lt;p&gt;最终生成ca.pem, client-me.pem两个证书文件，复制到客户端，并导入。
ca.pem导入为可信任的证书颁发机构，client-me.pem导入为信任证书。&lt;/p&gt;
&lt;h3 id=&#34;代理&#34;&gt;代理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;创建nghttpx的配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ sudo mkdir /etc/nghttpx
$ sudo touch /etc/nghttpx/nghttpx.conf
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;编辑配置文件 nghttpx.conf&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;frontend=0.0.0.0,443;tls
backend=127.0.0.1,3128;no-tls
#服务器证书
private-key-file=/etc/letsencrypt/live/[domain]/privkey.pem
certificate-file=/etc/letsencrypt/live/[domain]/fullchain.pem
#客户端验证
dh-param-file=/etc/nghttpx/dh.pem
verify-client-cacert=/etc/nghttpx/ca.pem
#代理
http2-proxy=yes
no-via=yes
no-ocsp=yes
no-host-rewrite=yes
add-x-forwarded-for=yes
strip-incoming-x-forwarded-for=yes
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中[domain]为服务器的域名，privkey.pem, fullchain.pem是letsencrypt生成的服务器证书。dh.pem, ca.pem是客户端证书&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ngttpx服务&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/systemd/system/nghttpx.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编辑内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Unit] 
Description=nghttpx 
After=network.target 
	
[Service] 
Type=simple 
ExecStart=/usr/local/bin/nghttpx --conf=/etc/nghttpx/nghttpx.conf
ExecReload=/bin/kill -SIGUSR1 ${MAINPID}
ExecStop=/bin/kill -SIGQUIT ${MAINPID}
	
[Install] 
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;服务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo systemctl daemon-reload
$ sudo systemctl start nghttpx
$ sudo systemctl enable nghttpx
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;缓存&#34;&gt;缓存&lt;/h3&gt;
&lt;p&gt;通过yum安装的squid服务，默认配置基本上已经满足要求，需要做一点小修改&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编辑配置&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/squid/squid.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在配置文件尾部加上&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;via off
forwarded_for delete
access_log none
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;重启服务&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ sudo systemctl restart squid
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;nghttpx 官方指引 &lt;a href=&#34;https://nghttp2.org/documentation/nghttpx-howto.html&#34;&gt;https://nghttp2.org/documentation/nghttpx-howto.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;谷歌上另外一篇参考的nghttpx+squid &lt;a href=&#34;https://wzyboy.im/post/1052.html&#34;&gt;https://wzyboy.im/post/1052.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nghttpx 的配置，证书，服务脚本 &lt;a href=&#34;https://blog.apar.jp/linux/2584/&#34;&gt;https://blog.apar.jp/linux/2584/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;centos 编译 nghttp2 &lt;a href=&#34;https://gist.github.com/sonots/2bdf6cd26c23ef44db71&#34;&gt;https://gist.github.com/sonots/2bdf6cd26c23ef44db71&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;certbot on debian 10 &lt;a href=&#34;https://www.tecmint.com/setup-free-ssl-certificate-for-apache-on-debian-10/&#34;&gt;https://www.tecmint.com/setup-free-ssl-certificate-for-apache-on-debian-10/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;免费证书提供 &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;https://letsencrypt.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;client 证书生成 &lt;a href=&#34;https://gist.github.com/mtigas/952344&#34;&gt;https://gist.github.com/mtigas/952344&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vps引用&#34;&gt;VPS引用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[linode 东京] (&lt;a href=&#34;https://www.linode.com/?r=ec0967c3fb5243693ca573d68000d3a63442ac66&#34;&gt;https://www.linode.com/?r=ec0967c3fb5243693ca573d68000d3a63442ac66&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[bandwagonhost 中国优化] (&lt;a href=&#34;https://bandwagonhost.com/aff.php?aff=20451&#34;&gt;https://bandwagonhost.com/aff.php?aff=20451&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[cubenet] (&lt;a href=&#34;https://www.cubecloud.net/aff.php?aff=963&#34;&gt;https://www.cubecloud.net/aff.php?aff=963&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>使用powerdns搭建自己安全的域名解析服务</title>
      <link>https://windyboy.github.io/post/2017/10/setup-powerdns-authoritative-with-dnssec/</link>
      <pubDate>Thu, 14 Feb 2019 10:00:00 +0800</pubDate>
      
      <guid>https://windyboy.github.io/post/2017/10/setup-powerdns-authoritative-with-dnssec/</guid>
      <description>&lt;h2 id=&#34;概况&#34;&gt;概况&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;解析服务需要提供两个独立的IP，一主(master)一从(slave)提供解析服务&lt;/li&gt;
&lt;li&gt;两个NS服务器IP地址要注册到域名注册商的服务里，解决先有鸡还是先有蛋的问题&lt;/li&gt;
&lt;li&gt;DNSSEC的key也要注册到注册商&lt;/li&gt;
&lt;li&gt;安装 &lt;a href=&#34;https://github.com/ngoduykhanh/PowerDNS-Admin&#34; title=&#34;web&#34;&gt;powerdns-admin&lt;/a&gt; 管理域名&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装软件&#34;&gt;安装软件&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;两台服务器都安装相同的软件, authoritative 和 database&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;从官方的repohttpsrepopowerdnscom安装authoritative服务软件&#34;&gt;从官方的&lt;a href=&#34;https://repo.powerdns.com/&#34;&gt;repo&lt;/a&gt;安装authoritative服务软件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;创建pdns的源&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# vim /etc/apt/sources.list.d/pdns.list

deb [arch=amd64] http://repo.powerdns.com/debian stretch-rec-41 main
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;屏蔽debian自带的pdns&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# vim /etc/apt/preferences.d/pdns 
Package: pdns-*
Pin: origin repo.powerdns.com
Pin-Priority: 800
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;引入官方的key&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# curl https://repo.powerdns.com/FD380FBB-pub.asc | apt-key add - 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;安装服务器软件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# apt-get update
# apt-get install pdns-server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;其他的系统可以到 &lt;a href=&#34;https://repo.powerdns.com/&#34;&gt;https://repo.powerdns.com/&lt;/a&gt; 参考响应的安装指引&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装数据库&#34;&gt;安装数据库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;安装postgresql&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# apt install postgresql postgresql-client
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;初始化数据库账号&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# sudo -u postgres psql
postgres=# create user pdns with password &#39;mypdnspassword&#39;;
postgres=# create database pdns owner pdns;
postgres=# grant all privileges on database pdns to pdns;
postgres=# \q
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;安装powerdns的backend, 创建数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# apt install pdns-backend-pgsql
# psql -U pdns -d pdns -h 127.0.0.1 -p 5432
pdns=&amp;gt; \i /usr/share/doc/pdns-backend-pgsql/schema.pgsql.sql
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;建立主从数据的复制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在从(Slave)服务器上执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# psql -U pdns -d pdns -h 127.0.0.1 -p 5432

pdns=&amp;gt; insert into supermasters (ip, nameserver, account) values (&#39;x.x.x.x1&#39;, &#39;ns2.some.host&#39;,&#39;admin&#39;);
pdns=&amp;gt; insert into domains (name, master, type) values (&#39;some.host&#39;, &#39;x.x.x.x1&#39;, &#39;SLAVE&#39;);
pdns=&amp;gt;\q

# systemctl restart pdns
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;x.x.x.x1 是主服务器的IP地址&lt;/p&gt;
&lt;h3 id=&#34;安装-powerdns-admin&#34;&gt;安装 &lt;a href=&#34;https://github.com/ngoduykhanh/PowerDNS-Admin&#34; title=&#34;web&#34;&gt;Powerdns-Admin&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;管理界面只安装在主服务器上&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装基础设施&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# apt install -y libmysqlclient-dev libsasl2-dev libldap2-dev libssl-dev libxml2-dev libxslt1-dev libxmlsec1-dev libffi-dev pkg-config apt-transport-https virtualenv build-essential
# curl -sL https://deb.nodesource.com/setup_10.x | bash -
# apt-get install -y nodejs
# curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
# echo &amp;quot;deb https://dl.yarnpkg.com/debian/ stable main&amp;quot; | tee /etc/apt/sources.list.d/yarn.list
# apt update -y
# apt install -y yarn
# apt install nginx
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;创建数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ sudo su - postgres
$ createuser powerdnsadmin
$ createdb powerdnsadmindb
$ psql
postgres=# alter user powerdnsadmin with encrypted password &#39;powerdnsadmin&#39;;
postgres=# grant all privileges on database powerdnsadmindb to powerdnsadmin;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;安装软件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# git clone https://github.com/ngoduykhanh/PowerDNS-Admin.git /opt/web/powerdns-admin
# cd /opt/web/powerdns-admin
# virtualenv -p python3 flask
# source ./flask/bin/activate
# pip install -r requirements.txt
# pip install psycopg2
# cp config_template.py config.py

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;数据库配置&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# vi config.py
SQLALCHEMY_DATABASE_URI = &#39;postgresql://powerdnsadmin:powerdnsadmin@127.0.0.1/powerdnsadmindb&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;运行&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# export FLASK_APP=app/__init__.py
# flask db upgrade
# yarn install --pure-lockfile
# flask assets build
# ./run.py
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;安装服务&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# groupadd powerdnsadmin
# useradd --system --user-group powerdnsadmin
# vim /etc/systemd/system/powerdns-admin.service

[Unit]
Description=PowerDNS-Admin
After=network.target

[Service]
Type=simple
User=powerdnsadmin
Group=powerdnsadmin
ExecStart=/opt/web/powerdns-admin/flask/bin/gunicorn --workers 2 --bind unix:/opt/web/powerdns-admin/powerdns-admin.sock app:app
WorkingDirectory=/opt/web/powerdns-admin
Restart=always

[Install]
WantedBy=multi-user.target

# systemctl daemon-reload
# systemctl start powerdns-admin
# systemctl enable powerdns-admin
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;配置反向代理&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# vim /etc/nginx/sites-available/pdns

server {
    server_name pdns.some.local ;
    listen 80;
      index                     index.html index.htm index.php;
  root                      /opt/web/powerdns-admin;
  access_log                /var/log/nginx/powerdns-admin.local.access.log combined;
  error_log                 /var/log/nginx/powerdns-admin.local.error.log;

  client_max_body_size              10m;
  client_body_buffer_size           128k;
  proxy_redirect                    off;
  proxy_connect_timeout             90;
  proxy_send_timeout                90;
  proxy_read_timeout                90;
  proxy_buffers                     32 4k;
  proxy_buffer_size                 8k;
  proxy_set_header                  Host $host;
  proxy_set_header                  X-Real-IP $remote_addr;
  proxy_set_header                  X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_headers_hash_bucket_size    64;

  location ~ ^/static/  {
    include  /etc/nginx/mime.types;
    root /opt/web/powerdns-admin/app;

    location ~*  \.(jpg|jpeg|png|gif)$ {
      expires 365d;
    }

    location ~* ^.+.(css|js)$ {
      expires 7d;
    }
  }

  location / {
    proxy_pass            http://unix:/opt/web/powerdns-admin/powerdns-admin.sock;
    proxy_read_timeout    120;
    proxy_connect_timeout 120;
    proxy_redirect        off;
  }
}

# ln -s /etc/nginx/sites-available/pdns /etc/nginx/sites-enabled/pdns
# nginx -t
# systemctl restart nginx
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;连接到PowerDNS API&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;打开网页 pdns.some.host ， 注册新用户并登陆

打开 API 设置页面，连接到主服务器
http://pdns.some.host/admin/setting/pdns

PDNS API URL: http://localhost:8081
PDNS API KEY: somekey

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置服务&#34;&gt;配置服务&lt;/h2&gt;
&lt;h3 id=&#34;配置环境&#34;&gt;配置环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;配置host文件，强制解析 ns1, ns2&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# vim /etc/hosts
x.x.x.x1   ns1.some.host
x.x.x.x2   ns2.some.host
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;两台解析服务器都使用相同配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分别在两台主机验证&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# ping ns1.some.host
# ping ns2.some.host
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;master-ns1somehost&#34;&gt;Master ns1.some.host&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# vim /etc/powerdns/pdns.conf

config-dir=/etc/powerdns
setuid=pdns
setgid=pdns
master=yes
slave=no
allow-axfr-ips=x.x.x.x2/32
default-soa-name=ns1.some.host
dnsupdate=yes
daemon=yes
disable-axfr=no
guardian=yes
local-address=0.0.0.0
local-port=53
log-dns-details=no
log-dns-queries=no
loglevel=9
socket-dir=/var/run
version-string=powerdns
# only 4.0
webserver=yes
api=yes
api-key=somekey
include-dir=/etc/powerdns/pdns.d
launch=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中x.x.x.x2为从服务器ns2.some.host的ip地址&lt;/p&gt;
&lt;h3 id=&#34;slave-ns2somehost&#34;&gt;Slave ns2.some.host&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# vim /etc/powerdns/pdns.conf

config-dir=/etc/powerdns
setuid=pdns
setgid=pdns
master=no
slave=yes
daemon=yes
disable-axfr=yes
guardian=yes
local-address=0.0.0.0
local-port=53
log-dns-details=no
log-dns-queries=no
loglevel=9
slave-cycle-interval=60
socket-dir=/var/run
version-string=powerdns
include-dir=/etc/powerdns/pdns.d
launch=
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;使用powerdns-admin界面创建域名&#34;&gt;使用&lt;a href=&#34;https://github.com/ngoduykhanh/PowerDNS-Admin&#34; title=&#34;web&#34;&gt;powerdns-admin&lt;/a&gt;界面创建域名&lt;/h3&gt;
&lt;p&gt;登录到&lt;a href=&#34;https://github.com/ngoduykhanh/PowerDNS-Admin&#34; title=&#34;web&#34;&gt;powerdns-admin&lt;/a&gt;的网页， 选择New Domain，进入新建向导的网页, 在 name 里输入域名 some.host, type 设置为 master, SOA-EDIT-API 默认 DEFAULT&lt;/p&gt;
&lt;p&gt;点击Dashboard 回到主界面, 从列表中选择刚才创建的域名 some.host&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;some.host	SOA	ns1.some.host hostmaster.some.host 2017101100 28800 7200 604800 86400
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第一条ns1.some.host为主服务器域名&lt;/p&gt;
&lt;p&gt;第二条hostmaster.some.host实际上是邮件地址，系统替换第一个&#39;.&amp;lsquo;为&amp;rsquo;@&#39;, 这里代表的地址是hostmaster@some.host，具体可以根据实际情况写自己的邮箱地址&lt;/p&gt;
&lt;p&gt;创建成功以后可以用dig命令核实一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dig some.host soa @localhost
;; ANSWER SECTION:
some.host.              3600    IN      SOA     ns1.some.host. postmaster.some.host. 2017101106 28800 7200 604800 86400
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;创建dnssec记录&#34;&gt;创建DNSSEC记录&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用pdnsutil创建DNSSEC&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;pdnsutil secure-zone some.host

Securing zone with default key size
Adding CSK (257) with algorithm ecdsa256
Zone some.host secured
gpgsql Connection successful. Connected to database &#39;pdns&#39; on &#39;localhost&#39;.
Adding NSEC ordering information
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;查看已经生成的key&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;pdnsutil show-zone some.host

This is a Master zone
Last SOA serial number we notified: 2017101100 == 2017101100 (serial in the database)
Metadata items: None
Zone has NSEC semantics
keys:
ID = 10 (CSK), flags = 257, tag = 59581, algo = 13, bits = 256    Active ( ECDSAP256SHA256 )
CSK DNSKEY = some.host. IN DNSKEY 257 3 13 PQ29wza3majnpUQ+21oEkQjfpyN3dMnTy0StcnNX7YeuRRkOeddqPpFMDoeovZcpQGV0BxduvFn/Q2DW5WXp8w== ; ( ECDSAP256SHA256 )
DS = some.host. IN DS 59581 13 1 7908b7585027f7a262d664c7ee07ae5c5733d44e ; ( SHA1 digest )
DS = some.host. IN DS 59581 13 2 cfc9006e02d2a02448cd8cdde7fcb8e840703883b166685f37db5225ad902a88 ; ( SHA256 digest )
DS = some.host. IN DS 59581 13 3 67099daf0ecaf3e99c1c5dcce132c66dc201d27d2f1baade0fecbbbaa2c6b423 ; ( GOST R 34.11-94 digest )
DS = some.host. IN DS 59581 13 4 53062fef193fae2564f9f2441cb821ae3b55c92afac5790ae70cb8e9359313e0a4c879a09c44c9cb98ed68100cf2e938 ; ( SHA-384 digest )
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;把相关信息推送到从服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在主服务器上执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pdnsutil rectify-zone some.host
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;注册解析服务&#34;&gt;注册解析服务&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;注册nameserver的IP地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打开域名注册商的网页，我这里以&lt;a href=&#34;https://www.namesilo.com&#34; title=&#34;namesilo&#34;&gt;namesilo&lt;/a&gt;为例&lt;/p&gt;
&lt;p&gt;点击domain manager, 再点击已经注册成功的域名(some.host)，进入域名管理界面&lt;/p&gt;
&lt;p&gt;在NameServers部分，点击View/Manage Registered NameServers， 进入注册域名解析服务器页面&lt;/p&gt;
&lt;p&gt;点击 REGISTER NEW NAMESERVER 按钮，分别加入ns1, ns2的IP地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册DNSSEC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;回到之前域名管理的页面， 点击DS Records (DNSSEC):后面的Update连接&lt;/p&gt;
&lt;p&gt;进入注册Key的界面， 相关信息在之前 pdnsutil show-zone some.host 的部分已经列出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DS = some.host. IN DS 59581 13 1 7908b7585027f7a262d664c7ee07ae5c5733d44e ; ( SHA1 digest )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Digest = 7908b7585027f7a262d664c7ee07ae5c5733d44e&lt;/p&gt;
&lt;p&gt;Key Tag = 59581&lt;/p&gt;
&lt;p&gt;Digest Type = 1&lt;/p&gt;
&lt;p&gt;Algorithm = 13&lt;/p&gt;
&lt;h2 id=&#34;检验&#34;&gt;检验&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;检查域名是否已在全球生效&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打开网站： &lt;a href=&#34;https://dnschecker.org/&#34;&gt;https://dnschecker.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;输入域名 some.host , 检查各地的解析情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用dig在本地服务器检验DNSSEC&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# dig some.host +dnssec +multi @localhost

;; AUTHORITY SECTION:
some.host.              86400 IN SOA ns1.some.host. hostmaster.some.host. (
                                2017101100 ; serial
                                28800      ; refresh (8 hours)
                                7200       ; retry (2 hours)
                                604800     ; expire (1 week)
                                86400      ; minimum (1 day)
                                )
some.host.              86400 IN RRSIG SOA 13 2 86400 (
                                20171019000000 20170928000000 59581 some.host.
                                UyrOyITKMWhtf2n8lN3ZhtxaAGSMFQI9Qndd49D2/Pe5
                                wWLileK3RVPFRGlXflQfFDfQ6wb7R5+aBCls6qkmIA== )
some.host.              86400 IN NSEC some.host. SOA RRSIG NSEC DNSKEY
some.host.              86400 IN RRSIG NSEC 13 2 86400 (
                                20171019000000 20170928000000 59581 some.host.
                                4fjlTftqvjmoH0OwVf3uuC8OvvuYyyIckn+c5L0J89Np
                                kc1+LCZ5DJpQrnbsWypxr5bDXARB86pr046dbrs21A== )
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;使用在线工具检验 DNSSEC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打开网页 &lt;a href=&#34;https://dnssec-debugger.verisignlabs.com&#34;&gt;https://dnssec-debugger.verisignlabs.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;输入域名 some.host&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[How To Install and Configure PowerDNS with a MariaDB Backend on Ubuntu 14.04] (&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-powerdns-with-a-mariadb-backend-on-ubuntu-14-04&#34;&gt;https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-powerdns-with-a-mariadb-backend-on-ubuntu-14-04&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ngoduykhanh/PowerDNS-Admin/wiki/Running-PowerDNS-Admin-on-Ubuntu-16.04---Ubuntu-18.04&#34;&gt;Running PowerDNS Admin on Ubuntu 16.04 Ubuntu 18.04&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ngoduykhanh/PowerDNS-Admin/wiki/Using-PowerDNS-Admin-with-PostgreSQL&#34;&gt;Using PowerDNS Admin with PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;官方安装文档 &lt;a href=&#34;https://doc.powerdns.com/authoritative/installation.html&#34;&gt;https://doc.powerdns.com/authoritative/installation.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vps-推荐&#34;&gt;VPS 推荐&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[linode 东京] (&lt;a href=&#34;https://www.linode.com/?r=ec0967c3fb5243693ca573d68000d3a63442ac66&#34;&gt;https://www.linode.com/?r=ec0967c3fb5243693ca573d68000d3a63442ac66&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[bandwagonhost 中国优化] (&lt;a href=&#34;https://bandwagonhost.com/aff.php?aff=20451&#34;&gt;https://bandwagonhost.com/aff.php?aff=20451&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[cubecloud] (&lt;a href=&#34;https://www.cubecloud.net/aff.php?aff=963&#34;&gt;https://www.cubecloud.net/aff.php?aff=963&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>tomcat 以 keystore 的方式使用 letsencrypt 证书</title>
      <link>https://windyboy.github.io/post/2016/09/tomcat-keystore-using-letsencrypt-certs/</link>
      <pubDate>Wed, 28 Sep 2016 16:00:00 +0800</pubDate>
      
      <guid>https://windyboy.github.io/post/2016/09/tomcat-keystore-using-letsencrypt-certs/</guid>
      <description>&lt;h2 id=&#34;概况&#34;&gt;概况&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tomcat.apache.org/&#34; title=&#34;apache tomcat&#34;&gt;apache tomcat&lt;/a&gt; 应用服务器（在不使用apr连接器时）使用SSL证书的时候使用的是java专属的证书管理方式&lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/security/KeyStore.html&#34; title=&#34;keystore&#34;&gt;keystore&lt;/a&gt;, 并不能直接使用&lt;a href=&#34;https://letsencrypt.org/&#34; title=&#34;letsencrypt&#34;&gt;letsencrypt&lt;/a&gt;的免费证书。&lt;/li&gt;
&lt;li&gt;要把证书导入&lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/security/KeyStore.html&#34; title=&#34;keystore&#34;&gt;keystore&lt;/a&gt;, 首先需要使用&lt;a href=&#34;https://www.openssl.org/&#34; title=&#34;openssl&#34;&gt;openssl&lt;/a&gt;把证书导出到.p12文件中，然后使用keytool把ca倒入为root(alias root)， 把服务器的证书导入为tomcat(alias tomcat)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;导入证书&#34;&gt;导入证书&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;前提&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;已经成功申请到有效的证书(使用&lt;a href=&#34;https://letsencrypt.org/&#34; title=&#34;letsencrypt&#34;&gt;letsencrypt&lt;/a&gt; 申请有效的服务器证书)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 openssl 工具，把证书导出到.p12文件中&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;  # openssl pkcs12 -export -in cert.pem -inkey privkey.pem \
  -out cert_and_key.p12 -name tomcat \
  -CAfile chain.pem -caname root
  Enter Export Password:
  Verifying - Enter Export Password:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;提示输入导出密码，这里导出密码，可以直接回车，此时密码为空。 如果输入了密码，则在下面导入的时候需要输入相同的密码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用keytool导入证书和ca&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;  # keytool -importkeystore \
  -deststorepass &amp;lt;changeit&amp;gt; -destkeypass &amp;lt;changeit&amp;gt; \
  -destkeystore MyDSKeyStore.jks -srckeystore cert_and_key.p12 \
  -srcstoretype PKCS12 \
  -srcstorepass &amp;lt;theExportPasswordAbove&amp;gt; -alias tomcat
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意deststorepass和destkeypass必须相同，否则tomcat无法获取证书&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # keytool -import -trustcacerts \
  -srcstorepass &amp;lt;theExportPasswordAbove&amp;gt; \
  -alias root -file chain.pem -keystore MyKeyStore.jks
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;配置&lt;a href=&#34;https://tomcat.apache.org/&#34; title=&#34;apache tomcat&#34;&gt;apache tomcat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;  # vim conf/server.xml
  &amp;lt;Connector port=&amp;quot;443&amp;quot; protocol=&amp;quot;org.apache.coyote.http11.Http11Protocol&amp;quot;
            maxThreads=&amp;quot;150&amp;quot; SSLEnabled=&amp;quot;true&amp;quot; scheme=&amp;quot;https&amp;quot; secure=&amp;quot;true&amp;quot;
            keystoreFile=&amp;quot;/&amp;lt;path&amp;gt;/MyKeyStore.jks&amp;quot; keystorePass=&amp;quot;&amp;lt;changeit&amp;gt;&amp;quot;
               clientAuth=&amp;quot;false&amp;quot; sslProtocol=&amp;quot;TLS&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;keystoreFile 是MyKeyStore.jks文件的绝对路径&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;keystorePass 是MyKeyStore.jks的storepasss以及keypass, 必须相同&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How to use the certificate for Tomcat &lt;a href=&#34;https://community.letsencrypt.org/t/how-to-use-the-certificate-for-tomcat/3677&#34;&gt;https://community.letsencrypt.org/t/how-to-use-the-certificate-for-tomcat/3677&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;keytool - Key and Certificate Management Tool &lt;a href=&#34;http://docs.oracle.com/javase/6/docs/technotes/tools/windows/keytool.html&#34;&gt;http://docs.oracle.com/javase/6/docs/technotes/tools/windows/keytool.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tomcat SSL/TLS Configuration HOW-TO &lt;a href=&#34;https://tomcat.apache.org/tomcat-7.0-doc/ssl-howto.html&#34;&gt;https://tomcat.apache.org/tomcat-7.0-doc/ssl-howto.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;letsencrypt.sh 证书制作 &lt;a href=&#34;https://www.hshh.org/letsencrypt/letsencrypt.sh_http-01&#34;&gt;https://www.hshh.org/letsencrypt/letsencrypt.sh_http-01&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;免费证书提供 &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;https://letsencrypt.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vps-推荐&#34;&gt;VPS 推荐&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[linode 东京] (&lt;a href=&#34;https://www.linode.com/?r=ec0967c3fb5243693ca573d68000d3a63442ac66&#34;&gt;https://www.linode.com/?r=ec0967c3fb5243693ca573d68000d3a63442ac66&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[bandwagonhost 中国优化] (&lt;a href=&#34;https://bandwagonhost.com/aff.php?aff=20451&#34;&gt;https://bandwagonhost.com/aff.php?aff=20451&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[dgchost 新加波] (&lt;a href=&#34;https://www.dgchost.net/client/aff.php?aff=226&#34;&gt;https://www.dgchost.net/client/aff.php?aff=226&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>